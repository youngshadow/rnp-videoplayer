package jtree;

 import java.awt.event.ActionEvent;
 import java.awt.event.MouseAdapter;
 import java.awt.event.MouseEvent;
 import java.awt.event.MouseListener;
 import java.util.Enumeration;
 import javax.swing.AbstractAction;
 import javax.swing.ImageIcon;
 import javax.swing.JComponent;
 import javax.swing.JFrame;
 import javax.swing.KeyStroke;
 import javax.swing.tree.DefaultMutableTreeNode;
 import javax.swing.tree.DefaultTreeCellRenderer;
 import javax.swing.tree.DefaultTreeModel;
 import javax.swing.tree.MutableTreeNode;
 import javax.swing.tree.TreeNode;
 import javax.swing.tree.TreePath;






public class jtreeTest extends javax.swing.JFrame {

     private DefaultMutableTreeNode dn = new DefaultMutableTreeNode("Name");  //  @jve:decl-index=0:
    private DefaultTreeModel treeModel = new DefaultTreeModel(dn);
     /** Creates new form jtreeTest */
     public jtreeTest() {
         initComponents();
          removeButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("DELETE"),"delete_action");
         removeButton.getActionMap().put("delete_action",new DeleteAction());
     }

     /** This method is called from within the constructor to
      * initialize the form.
      * WARNING: Do NOT modify this code. The content of this method is
      * always regenerated by the Form Editor.
      */
     @SuppressWarnings("unchecked")
     // <editor-fold defaultstate="collapsed" desc="Generated Code">
     private void initComponents() {

         jScrollPane1 = new javax.swing.JScrollPane();
         jTree1 = new javax.swing.JTree();
         okButton = new javax.swing.JButton();
         jTextField1 = new javax.swing.JTextField();
         selecionaButton = new javax.swing.JButton();
         removeButton = new javax.swing.JButton();
         addButton = new javax.swing.JButton();
         imprimirButton = new javax.swing.JButton();

         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

         //jTree1.setRootVisible(false); // esconde root da jtree
         jTree1.setModel(treeModel);
         jTree1.setEditable(true);
         jScrollPane1.setViewportView(jTree1);
         ImageIcon leafIcon = createImageIcon("right.gif");
         if (leafIcon != null) {
             DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
             renderer.setLeafIcon(leafIcon);
             jTree1.setCellRenderer(renderer);
         } else {
             System.out.println("Leaf icon missing; using default.");
         }
         jTree1.addMouseListener(ml);

         okButton.setText("ok");
         okButton.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 okButtonActionPerformed(evt);
             }
         });

         selecionaButton.setText("Selecionado");
         selecionaButton.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 selecionaButtonActionPerformed(evt);
             }
         });

         removeButton.setText("Remove");
         removeButton.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 removeButtonActionPerformed(evt);
             }
         });

         addButton.setText("add");
         addButton.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 addButtonActionPerformed(evt);
             }
         });

         imprimirButton.setText("imprimir loop");
         imprimirButton.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 imprimirButtonActionPerformed(evt);
             }
         });

         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
         getContentPane().setLayout(layout);
         layout.setHorizontalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                 .addGap(19, 19, 19)
                 .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                         .addGap(18, 18, 18)
                         .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                         .addComponent(okButton))
                     .addGroup(layout.createSequentialGroup()
                         .addGap(26, 26, 26)
                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                             .addComponent(removeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                             .addComponent(selecionaButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                     .addGroup(layout.createSequentialGroup()
                         .addGap(50, 50, 50)
                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                             .addComponent(imprimirButton)
                             .addComponent(addButton))))
                 .addGap(87, 87, 87))
         );
         layout.setVerticalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(layout.createSequentialGroup()
                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                         .addGap(58, 58, 58)
                         .addComponent(addButton)
                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                         .addComponent(imprimirButton)
                         .addGap(17, 17, 17)
                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                             .addComponent(okButton)
                             .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                         .addGap(47, 47, 47)
                         .addComponent(selecionaButton)
                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                         .addComponent(removeButton))
                     .addGroup(layout.createSequentialGroup()
                         .addContainerGap()
                         .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                 .addContainerGap(14, Short.MAX_VALUE))
         );

         pack();
     }// </editor-fold>

     private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {

         DefaultMutableTreeNode newChild = new DefaultMutableTreeNode(jTextField1.getText());
        dn.add(newChild);
        treeModel.reload(dn);
 }

     private void selecionaButtonActionPerformed(java.awt.event.ActionEvent evt) {
       Object item = jTree1.getLastSelectedPathComponent();
           if(item != null)
             System.out.println("You chose " + item);

             System.out.println();


 }

     private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {

         TreePath currentSelection = jTree1.getSelectionPath();
         if (currentSelection != null) {
             DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode)
                          (currentSelection.getLastPathComponent());
             MutableTreeNode parent = (MutableTreeNode)(currentNode.getParent());
             if (parent != null) {
                 treeModel.removeNodeFromParent(currentNode);
                 return;
             }

         }
 }

     private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {
         // TODO add your handling code here:
        addObject(jTextField1.getText());


 }

     private void imprimirButtonActionPerformed(java.awt.event.ActionEvent evt) {
         System.out.println("percorrer");
         print();

 }

     /**
     * @param args the command line arguments
     */
     public static void main(String args[]) {
         java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
                 new jtreeTest().setVisible(true);
             }
         });
     }

     // Variables declaration - do not modify
     private javax.swing.JButton addButton;
     private javax.swing.JButton imprimirButton;
     private javax.swing.JScrollPane jScrollPane1;
     private javax.swing.JTextField jTextField1;
     private javax.swing.JTree jTree1;
     private javax.swing.JButton okButton;
     private javax.swing.JButton removeButton;
     private javax.swing.JButton selecionaButton;
     // End of variables declaration



      /** Returns an ImageIcon, or null if the path was invalid. */
     protected static ImageIcon createImageIcon(String path) {
         java.net.URL imgURL = jtreeTest.class.getResource(path);
         if (imgURL != null) {
             return new ImageIcon(imgURL);
         } else {
             System.err.println("Couldn't find file: " + path);
             return null;
         }
     }

      /** Add child to the currently selected node. */
     public DefaultMutableTreeNode addObject(Object child) {
         DefaultMutableTreeNode parentNode = null;
         TreePath parentPath = jTree1.getSelectionPath();

         if (parentPath == null) {
             parentNode = dn;
         } else {
             parentNode = (DefaultMutableTreeNode)
                          (parentPath.getLastPathComponent());
         }

         return addObject(parentNode, child, true);
     }

     public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
                                             Object child) {
         return addObject(parent, child, false);
     }

     public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
                                             Object child,
                                             boolean shouldBeVisible) {
         DefaultMutableTreeNode childNode =
                 new DefaultMutableTreeNode(child);

         if (parent == null) {
             parent = dn;
         }

    //It is key to invoke this on the TreeModel, and NOT DefaultMutableTreeNode
         treeModel.insertNodeInto(childNode, parent,
                                  parent.getChildCount());

         //Make sure the user can see the lovely new node.
         if (shouldBeVisible) {
             jTree1.scrollPathToVisible(new TreePath(childNode.getPath()));
         }
         return childNode;
     }
 // classe interna anonima para retornar caminho do item clicado na jtree
      MouseListener ml = new MouseAdapter() {
         @Override
      public void mousePressed(MouseEvent e) {
          int selRow = jTree1.getRowForLocation(e.getX(), e.getY());
          TreePath selPath = jTree1.getPathForLocation(e.getX(), e.getY());
          if(selRow != -1) {
              if(e.getClickCount() == 1) {
                  mySingleClick(selRow, selPath);
              }
              else if(e.getClickCount() == 2) {
                  myDoubleClick(selRow, selPath);
                  JFrame frame = new JFrame();
                  frame.setVisible(true);

              }
          }
      }

         private void myDoubleClick(int selRow, TreePath selPath) {
            System.out.println(selRow+ " >"+selPath);
            System.out.println("primeiro depois do root..."+dn.getFirstChild());
            System.out.println("nodo is root "+dn.isRoot());

         }

         private void mySingleClick(int selRow, TreePath selPath) {
            System.out.println(selRow+ " "+selPath);
         }
  };


 // percorrer toda jtree e imprimir

  public void print(){
  recurse((TreeNode)jTree1.getModel().getRoot());
 }

 // assuming your elements are of type MyTreeNode
 public void recurse(TreeNode theNode){
    // printout the node itself
      System.out.println("1-- "+theNode);

   // if(theNode instanceof DefaultTreeModel){
     //        DefaultTreeModel defaultTreeModel = (DefaultTreeModel) theNode;

   // }

    // recursion
       for(Enumeration theChildren = theNode.children();theChildren.hasMoreElements();)
       {//System.out.println(theChildren);
             recurse((TreeNode)theChildren.nextElement());
       }
 }

 // metodo para quando tecla del é acionada
 private class DeleteAction extends AbstractAction {
    public DeleteAction () {
       super();
    }


         public void actionPerformed(ActionEvent e) {

         TreePath currentSelection = jTree1.getSelectionPath();
         if (currentSelection != null) {
             DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode)
                          (currentSelection.getLastPathComponent());
             MutableTreeNode parent = (MutableTreeNode)(currentNode.getParent());
             if (parent != null) {
                 treeModel.removeNodeFromParent(currentNode);
                 return;
             }
         }



         }

 }


 }